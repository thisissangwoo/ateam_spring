<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="wcustomer.mapper">

<!-- 페이징 처리된 Q&A 글 목록 조회 -->  
	<select id="qna_list" resultType="web_customer.CustomerVO">
		select *
		from (select rownum no, n.*, (select user_name from anafor_user where user_id = n.writer)name 
		      from (select * 
		      		from notice 
		      		where code= 'N03'
                    order by root, step desc)n 
		      <include refid="where_search" /> 
		      order by no desc)
		where no between #{beginList} and #{endList}      
	</select>

<!-- Q&A 상세 내용 조회 -->
	<select id="qna_detail" resultType="web_customer.CustomerVO">
		select n.*, (select user_name from anafor_user where user_id = n.writer) name
		from notice n
		where id = #{id}
		and code = 'N03'
	</select>
	
<!-- 상세화면 조회 전 조회수 증가(변경) -->
	<update id="qna_read">
		update notice set readcnt = readcnt + 1
		where id = #{id}
	</update>	
	
<!-- Q&A 신규 글 등록 처리 -->
	<insert id="qna_insert">
		insert into notice (id, root, title, content, writer, filename, filepath, code)
		values ( notice_seq.nextval, notice_seq.currval , #{title}, #{content}, #{writer},
				#{filename, jdbcType=VARCHAR}, #{filepath, jdbcType=VARCHAR}, 'N03')
	</insert>
		
<!-- 전체 Q&A 수 조회 -->
	<select id="qna_totalList" resultType="integer">
		select count(*) 
		from (select * from notice where code='N03')n 		
		<include refid="where_search" /> 
	</select>	

<!-- 해당 ID의 Q&A글 삭제 -->
	<delete id="qna_delete">
		delete from notice
		where id = #{id}
	</delete>

<!-- Q&A 수정 저장 -->
	<update id="qna_update">
		update notice set title=#{title}, content=#{content}
			, filename = #{filename, jdbcType=VARCHAR}
			, filepath = #{filepath, jdbcType=VARCHAR} 
		where id = #{id}
	</update>

<!-- Q&A에 대한 신규 답글 등록 -->
	<insert id="qna_reply_insert">
	<!-- root : 원글의 id를 root로 그대로 담는다. -->
	<!-- step : 동일한 root를 갖는 글에 대해 원글의 step보다 더 큰 step 을 가진 경우
	         step +1로 변경한 후 원글의 step+1 로 저장한다. -->
	<!-- indent : 원 글의 indent + 1 -->         
	
	
	<!-- step은 동일한 root를 갖는 글에 대해 원글의 step보다 더 큰 step 을 가진 경우
	         step +1로 변경한 후 원글의 step+1 로 저장한다. -->
	
	<!-- insert 전 step 에 대한 값을 변경한 후 그 값을 insert 처리 -->
	<!-- 오라클의 경우 여러 쿼리문을 작성할 경우 명령행을 구분하기 위하여 ;  을 붙여 사용 -->
	
	<![CDATA[
		{
			call declare
			begin
				update notice set step = step +1 where root = #{root} and step > #{step};
				         
				insert into notice ( id, title, content, writer, filename, filepath, root, step, indent,code )
				values (notice_seq.nextval, #{title}, #{content}, #{writer},
						#{filename, jdbcType=VARCHAR}, #{filepath, jdbcType=VARCHAR}, 
						#{root}, #{step}+1, #{indent}+1,'N03');
			end
		}
	]]>
	</insert>
  
  
  
  
  
<!-- 페이징 처리된 FAQ 글 목록 조회 -->  
	<select id="faq_list" resultType="web_customer.CustomerVO">
		select *
		from (select rownum no, n.*, (select user_name from anafor_user where user_id = n.writer)name 
		      from (select * 
		      		from notice 
		      		where code='N02'
                    order by root, step desc)n 
		      <include refid="where_search" /> 
		      order by no desc)
		where no between #{beginList} and #{endList}      
	</select>
 
<!-- 전체 FAQ 수 조회 -->
	<select id="faq_totalList" resultType="integer">
		select count(*) 
		from (select * from notice where code='N02')n 		
		<include refid="where_search" /> 
	</select>	
  
<!-- FAQ 신규 글 등록 처리 -->
	<insert id="faq_insert">
		insert into notice (id, root, title, content, writer, filename, filepath, code)
		values ( notice_seq.nextval, notice_seq.currval , #{title}, #{content}, #{writer},
				#{filename, jdbcType=VARCHAR}, #{filepath, jdbcType=VARCHAR}, 'N02')
	</insert>  
  
<!-- 상세화면 조회 전 조회수 증가(변경) -->
	<update id="faq_read">
		update notice set readcnt = readcnt + 1
		where id = #{id}
	</update>	  
  
<!-- FAQ 상세 내용 조회 -->
	<select id="faq_detail" resultType="web_customer.CustomerVO">
		select n.*, (select user_name from anafor_user where user_id = n.writer) name
		from notice n
		where id = #{id}
		and code = 'N02'
	</select>  
  
  
  
  
  
  
  
  
  
  
  
  
<!-- myBatis에서 sql 구문을 작성하여 id 를 참조하는 include기능을 사용해서 처처리할 수 있음.-->
	<sql id="where_search">
		<!-- 제목에 '테스트' 문자가 있는 것을 조회한다면.. where title like '테스트'  -->
		<if test="search == 'title' or search == 'content'">
			where ${search} like '%'||#{keyword}||'%'
		</if>
		
		<!-- 작성자에 '자' 문자가 있는 것을 조회한다면...  -->
		<if test="search == 'writer' ">
			where writer in ( select user_id from anafor_user where user_name like '%'||#{keyword}||'%' )
		</if>
		
		<if test="search == 'all' ">
			where title like '%'||#{keyword}||'%'
			or content  like '%'||#{keyword}||'%'
			or writer in ( select user_id from anafor_user where user_name like '%'||#{keyword}||'%' )	
		</if>
	</sql>	
</mapper>